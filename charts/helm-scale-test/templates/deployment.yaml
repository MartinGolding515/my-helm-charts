apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm-scale-test.fullname" . }}
  namespace: {{ include "helm-scale-test.name" . }}
  labels:
    {{- include "helm-scale-test.labels" . | nindent 4 }}
    app.mylabel: {{ printf "\"%d\"" (add (.Values.testnum|int) (.Values.replicaCount|int)) }}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /metrics/prometheus
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "helm-scale-test.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "helm-scale-test.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: test-data
          configMap:
            name: {{ printf "%s-data-cm" .Chart.Name }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          volumeMounts:
            - mountPath: /var/sis/
              name: test-data
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ['/bin/sh']
          args: ['-c','apt update && apt install -y stress; while true; do echo $(cat /var/sis/data.txt); stress -c ${CPU} -t ${TIME}; sleep ${SLEEP};done']
          env:
            {{- range $k, $v:= $.Values.env }}
            - name: {{ $k }}
              value: {{ $v | quote }}
              {{- end}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

